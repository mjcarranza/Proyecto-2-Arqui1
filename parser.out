Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> instruction
Rule 4     instruction -> arithmetic_instruction
Rule 5     instruction -> comparison_instruction
Rule 6     instruction -> memory_instruction
Rule 7     instruction -> jump_instruction
Rule 8     instruction -> stall_instruction
Rule 9     instruction -> settear_instruction
Rule 10    instruction -> label_instruction
Rule 11    instruction -> end_instruction
Rule 12    arithmetic_instruction -> ADD REG coma REG coma REG
Rule 13    arithmetic_instruction -> SUB REG coma REG coma REG
Rule 14    arithmetic_instruction -> AND REG coma REG coma REG
Rule 15    arithmetic_instruction -> ORR REG coma REG coma REG
Rule 16    arithmetic_instruction -> LSL REG coma REG coma REG
Rule 17    comparison_instruction -> CMP REG coma REG
Rule 18    comparison_instruction -> CMP REG coma INTEGER
Rule 19    memory_instruction -> LDR REG coma PARENTL REG PARENTR
Rule 20    memory_instruction -> STR REG coma PARENTL REG PARENTR
Rule 21    settear_instruction -> SET REG coma INTEGER
Rule 22    settear_instruction -> SET REG coma REG
Rule 23    jump_instruction -> BAL LABEL
Rule 24    jump_instruction -> BEQ LABEL
Rule 25    jump_instruction -> BGE LABEL
Rule 26    label_instruction -> LABEL
Rule 27    stall_instruction -> NOT
Rule 28    end_instruction -> END

Terminals, with rules where they appear

ADD                  : 12
AND                  : 14
BAL                  : 23
BEQ                  : 24
BGE                  : 25
CMP                  : 17 18
END                  : 28
INTEGER              : 18 21
LABEL                : 23 24 25 26
LDR                  : 19
LSL                  : 16
NOT                  : 27
ORR                  : 15
PARENTL              : 19 20
PARENTR              : 19 20
REG                  : 12 12 12 13 13 13 14 14 14 15 15 15 16 16 16 17 17 18 19 19 20 20 21 22 22
SET                  : 21 22
STR                  : 20
SUB                  : 13
coma                 : 12 12 13 13 14 14 15 15 16 16 17 18 19 20 21 22
error                : 

Nonterminals, with rules where they appear

arithmetic_instruction : 4
comparison_instruction : 5
end_instruction      : 11
instruction          : 2 3
instructions         : 1 2
jump_instruction     : 7
label_instruction    : 10
memory_instruction   : 6
program              : 0
settear_instruction  : 9
stall_instruction    : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . arithmetic_instruction
    (5) instruction -> . comparison_instruction
    (6) instruction -> . memory_instruction
    (7) instruction -> . jump_instruction
    (8) instruction -> . stall_instruction
    (9) instruction -> . settear_instruction
    (10) instruction -> . label_instruction
    (11) instruction -> . end_instruction
    (12) arithmetic_instruction -> . ADD REG coma REG coma REG
    (13) arithmetic_instruction -> . SUB REG coma REG coma REG
    (14) arithmetic_instruction -> . AND REG coma REG coma REG
    (15) arithmetic_instruction -> . ORR REG coma REG coma REG
    (16) arithmetic_instruction -> . LSL REG coma REG coma REG
    (17) comparison_instruction -> . CMP REG coma REG
    (18) comparison_instruction -> . CMP REG coma INTEGER
    (19) memory_instruction -> . LDR REG coma PARENTL REG PARENTR
    (20) memory_instruction -> . STR REG coma PARENTL REG PARENTR
    (23) jump_instruction -> . BAL LABEL
    (24) jump_instruction -> . BEQ LABEL
    (25) jump_instruction -> . BGE LABEL
    (27) stall_instruction -> . NOT
    (21) settear_instruction -> . SET REG coma INTEGER
    (22) settear_instruction -> . SET REG coma REG
    (26) label_instruction -> . LABEL
    (28) end_instruction -> . END

    ADD             shift and go to state 12
    SUB             shift and go to state 13
    AND             shift and go to state 14
    ORR             shift and go to state 15
    LSL             shift and go to state 16
    CMP             shift and go to state 17
    LDR             shift and go to state 18
    STR             shift and go to state 19
    BAL             shift and go to state 20
    BEQ             shift and go to state 22
    BGE             shift and go to state 23
    NOT             shift and go to state 24
    SET             shift and go to state 25
    LABEL           shift and go to state 21
    END             shift and go to state 26

    program                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    arithmetic_instruction         shift and go to state 4
    comparison_instruction         shift and go to state 5
    memory_instruction             shift and go to state 6
    jump_instruction               shift and go to state 7
    stall_instruction              shift and go to state 8
    settear_instruction            shift and go to state 9
    label_instruction              shift and go to state 10
    end_instruction                shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . arithmetic_instruction
    (5) instruction -> . comparison_instruction
    (6) instruction -> . memory_instruction
    (7) instruction -> . jump_instruction
    (8) instruction -> . stall_instruction
    (9) instruction -> . settear_instruction
    (10) instruction -> . label_instruction
    (11) instruction -> . end_instruction
    (12) arithmetic_instruction -> . ADD REG coma REG coma REG
    (13) arithmetic_instruction -> . SUB REG coma REG coma REG
    (14) arithmetic_instruction -> . AND REG coma REG coma REG
    (15) arithmetic_instruction -> . ORR REG coma REG coma REG
    (16) arithmetic_instruction -> . LSL REG coma REG coma REG
    (17) comparison_instruction -> . CMP REG coma REG
    (18) comparison_instruction -> . CMP REG coma INTEGER
    (19) memory_instruction -> . LDR REG coma PARENTL REG PARENTR
    (20) memory_instruction -> . STR REG coma PARENTL REG PARENTR
    (23) jump_instruction -> . BAL LABEL
    (24) jump_instruction -> . BEQ LABEL
    (25) jump_instruction -> . BGE LABEL
    (27) stall_instruction -> . NOT
    (21) settear_instruction -> . SET REG coma INTEGER
    (22) settear_instruction -> . SET REG coma REG
    (26) label_instruction -> . LABEL
    (28) end_instruction -> . END

    $end            reduce using rule 1 (program -> instructions .)
    ADD             shift and go to state 12
    SUB             shift and go to state 13
    AND             shift and go to state 14
    ORR             shift and go to state 15
    LSL             shift and go to state 16
    CMP             shift and go to state 17
    LDR             shift and go to state 18
    STR             shift and go to state 19
    BAL             shift and go to state 20
    BEQ             shift and go to state 22
    BGE             shift and go to state 23
    NOT             shift and go to state 24
    SET             shift and go to state 25
    LABEL           shift and go to state 21
    END             shift and go to state 26

    instruction                    shift and go to state 27
    arithmetic_instruction         shift and go to state 4
    comparison_instruction         shift and go to state 5
    memory_instruction             shift and go to state 6
    jump_instruction               shift and go to state 7
    stall_instruction              shift and go to state 8
    settear_instruction            shift and go to state 9
    label_instruction              shift and go to state 10
    end_instruction                shift and go to state 11

state 3

    (3) instructions -> instruction .

    ADD             reduce using rule 3 (instructions -> instruction .)
    SUB             reduce using rule 3 (instructions -> instruction .)
    AND             reduce using rule 3 (instructions -> instruction .)
    ORR             reduce using rule 3 (instructions -> instruction .)
    LSL             reduce using rule 3 (instructions -> instruction .)
    CMP             reduce using rule 3 (instructions -> instruction .)
    LDR             reduce using rule 3 (instructions -> instruction .)
    STR             reduce using rule 3 (instructions -> instruction .)
    BAL             reduce using rule 3 (instructions -> instruction .)
    BEQ             reduce using rule 3 (instructions -> instruction .)
    BGE             reduce using rule 3 (instructions -> instruction .)
    NOT             reduce using rule 3 (instructions -> instruction .)
    SET             reduce using rule 3 (instructions -> instruction .)
    LABEL           reduce using rule 3 (instructions -> instruction .)
    END             reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)


state 4

    (4) instruction -> arithmetic_instruction .

    ADD             reduce using rule 4 (instruction -> arithmetic_instruction .)
    SUB             reduce using rule 4 (instruction -> arithmetic_instruction .)
    AND             reduce using rule 4 (instruction -> arithmetic_instruction .)
    ORR             reduce using rule 4 (instruction -> arithmetic_instruction .)
    LSL             reduce using rule 4 (instruction -> arithmetic_instruction .)
    CMP             reduce using rule 4 (instruction -> arithmetic_instruction .)
    LDR             reduce using rule 4 (instruction -> arithmetic_instruction .)
    STR             reduce using rule 4 (instruction -> arithmetic_instruction .)
    BAL             reduce using rule 4 (instruction -> arithmetic_instruction .)
    BEQ             reduce using rule 4 (instruction -> arithmetic_instruction .)
    BGE             reduce using rule 4 (instruction -> arithmetic_instruction .)
    NOT             reduce using rule 4 (instruction -> arithmetic_instruction .)
    SET             reduce using rule 4 (instruction -> arithmetic_instruction .)
    LABEL           reduce using rule 4 (instruction -> arithmetic_instruction .)
    END             reduce using rule 4 (instruction -> arithmetic_instruction .)
    $end            reduce using rule 4 (instruction -> arithmetic_instruction .)


state 5

    (5) instruction -> comparison_instruction .

    ADD             reduce using rule 5 (instruction -> comparison_instruction .)
    SUB             reduce using rule 5 (instruction -> comparison_instruction .)
    AND             reduce using rule 5 (instruction -> comparison_instruction .)
    ORR             reduce using rule 5 (instruction -> comparison_instruction .)
    LSL             reduce using rule 5 (instruction -> comparison_instruction .)
    CMP             reduce using rule 5 (instruction -> comparison_instruction .)
    LDR             reduce using rule 5 (instruction -> comparison_instruction .)
    STR             reduce using rule 5 (instruction -> comparison_instruction .)
    BAL             reduce using rule 5 (instruction -> comparison_instruction .)
    BEQ             reduce using rule 5 (instruction -> comparison_instruction .)
    BGE             reduce using rule 5 (instruction -> comparison_instruction .)
    NOT             reduce using rule 5 (instruction -> comparison_instruction .)
    SET             reduce using rule 5 (instruction -> comparison_instruction .)
    LABEL           reduce using rule 5 (instruction -> comparison_instruction .)
    END             reduce using rule 5 (instruction -> comparison_instruction .)
    $end            reduce using rule 5 (instruction -> comparison_instruction .)


state 6

    (6) instruction -> memory_instruction .

    ADD             reduce using rule 6 (instruction -> memory_instruction .)
    SUB             reduce using rule 6 (instruction -> memory_instruction .)
    AND             reduce using rule 6 (instruction -> memory_instruction .)
    ORR             reduce using rule 6 (instruction -> memory_instruction .)
    LSL             reduce using rule 6 (instruction -> memory_instruction .)
    CMP             reduce using rule 6 (instruction -> memory_instruction .)
    LDR             reduce using rule 6 (instruction -> memory_instruction .)
    STR             reduce using rule 6 (instruction -> memory_instruction .)
    BAL             reduce using rule 6 (instruction -> memory_instruction .)
    BEQ             reduce using rule 6 (instruction -> memory_instruction .)
    BGE             reduce using rule 6 (instruction -> memory_instruction .)
    NOT             reduce using rule 6 (instruction -> memory_instruction .)
    SET             reduce using rule 6 (instruction -> memory_instruction .)
    LABEL           reduce using rule 6 (instruction -> memory_instruction .)
    END             reduce using rule 6 (instruction -> memory_instruction .)
    $end            reduce using rule 6 (instruction -> memory_instruction .)


state 7

    (7) instruction -> jump_instruction .

    ADD             reduce using rule 7 (instruction -> jump_instruction .)
    SUB             reduce using rule 7 (instruction -> jump_instruction .)
    AND             reduce using rule 7 (instruction -> jump_instruction .)
    ORR             reduce using rule 7 (instruction -> jump_instruction .)
    LSL             reduce using rule 7 (instruction -> jump_instruction .)
    CMP             reduce using rule 7 (instruction -> jump_instruction .)
    LDR             reduce using rule 7 (instruction -> jump_instruction .)
    STR             reduce using rule 7 (instruction -> jump_instruction .)
    BAL             reduce using rule 7 (instruction -> jump_instruction .)
    BEQ             reduce using rule 7 (instruction -> jump_instruction .)
    BGE             reduce using rule 7 (instruction -> jump_instruction .)
    NOT             reduce using rule 7 (instruction -> jump_instruction .)
    SET             reduce using rule 7 (instruction -> jump_instruction .)
    LABEL           reduce using rule 7 (instruction -> jump_instruction .)
    END             reduce using rule 7 (instruction -> jump_instruction .)
    $end            reduce using rule 7 (instruction -> jump_instruction .)


state 8

    (8) instruction -> stall_instruction .

    ADD             reduce using rule 8 (instruction -> stall_instruction .)
    SUB             reduce using rule 8 (instruction -> stall_instruction .)
    AND             reduce using rule 8 (instruction -> stall_instruction .)
    ORR             reduce using rule 8 (instruction -> stall_instruction .)
    LSL             reduce using rule 8 (instruction -> stall_instruction .)
    CMP             reduce using rule 8 (instruction -> stall_instruction .)
    LDR             reduce using rule 8 (instruction -> stall_instruction .)
    STR             reduce using rule 8 (instruction -> stall_instruction .)
    BAL             reduce using rule 8 (instruction -> stall_instruction .)
    BEQ             reduce using rule 8 (instruction -> stall_instruction .)
    BGE             reduce using rule 8 (instruction -> stall_instruction .)
    NOT             reduce using rule 8 (instruction -> stall_instruction .)
    SET             reduce using rule 8 (instruction -> stall_instruction .)
    LABEL           reduce using rule 8 (instruction -> stall_instruction .)
    END             reduce using rule 8 (instruction -> stall_instruction .)
    $end            reduce using rule 8 (instruction -> stall_instruction .)


state 9

    (9) instruction -> settear_instruction .

    ADD             reduce using rule 9 (instruction -> settear_instruction .)
    SUB             reduce using rule 9 (instruction -> settear_instruction .)
    AND             reduce using rule 9 (instruction -> settear_instruction .)
    ORR             reduce using rule 9 (instruction -> settear_instruction .)
    LSL             reduce using rule 9 (instruction -> settear_instruction .)
    CMP             reduce using rule 9 (instruction -> settear_instruction .)
    LDR             reduce using rule 9 (instruction -> settear_instruction .)
    STR             reduce using rule 9 (instruction -> settear_instruction .)
    BAL             reduce using rule 9 (instruction -> settear_instruction .)
    BEQ             reduce using rule 9 (instruction -> settear_instruction .)
    BGE             reduce using rule 9 (instruction -> settear_instruction .)
    NOT             reduce using rule 9 (instruction -> settear_instruction .)
    SET             reduce using rule 9 (instruction -> settear_instruction .)
    LABEL           reduce using rule 9 (instruction -> settear_instruction .)
    END             reduce using rule 9 (instruction -> settear_instruction .)
    $end            reduce using rule 9 (instruction -> settear_instruction .)


state 10

    (10) instruction -> label_instruction .

    ADD             reduce using rule 10 (instruction -> label_instruction .)
    SUB             reduce using rule 10 (instruction -> label_instruction .)
    AND             reduce using rule 10 (instruction -> label_instruction .)
    ORR             reduce using rule 10 (instruction -> label_instruction .)
    LSL             reduce using rule 10 (instruction -> label_instruction .)
    CMP             reduce using rule 10 (instruction -> label_instruction .)
    LDR             reduce using rule 10 (instruction -> label_instruction .)
    STR             reduce using rule 10 (instruction -> label_instruction .)
    BAL             reduce using rule 10 (instruction -> label_instruction .)
    BEQ             reduce using rule 10 (instruction -> label_instruction .)
    BGE             reduce using rule 10 (instruction -> label_instruction .)
    NOT             reduce using rule 10 (instruction -> label_instruction .)
    SET             reduce using rule 10 (instruction -> label_instruction .)
    LABEL           reduce using rule 10 (instruction -> label_instruction .)
    END             reduce using rule 10 (instruction -> label_instruction .)
    $end            reduce using rule 10 (instruction -> label_instruction .)


state 11

    (11) instruction -> end_instruction .

    ADD             reduce using rule 11 (instruction -> end_instruction .)
    SUB             reduce using rule 11 (instruction -> end_instruction .)
    AND             reduce using rule 11 (instruction -> end_instruction .)
    ORR             reduce using rule 11 (instruction -> end_instruction .)
    LSL             reduce using rule 11 (instruction -> end_instruction .)
    CMP             reduce using rule 11 (instruction -> end_instruction .)
    LDR             reduce using rule 11 (instruction -> end_instruction .)
    STR             reduce using rule 11 (instruction -> end_instruction .)
    BAL             reduce using rule 11 (instruction -> end_instruction .)
    BEQ             reduce using rule 11 (instruction -> end_instruction .)
    BGE             reduce using rule 11 (instruction -> end_instruction .)
    NOT             reduce using rule 11 (instruction -> end_instruction .)
    SET             reduce using rule 11 (instruction -> end_instruction .)
    LABEL           reduce using rule 11 (instruction -> end_instruction .)
    END             reduce using rule 11 (instruction -> end_instruction .)
    $end            reduce using rule 11 (instruction -> end_instruction .)


state 12

    (12) arithmetic_instruction -> ADD . REG coma REG coma REG

    REG             shift and go to state 28


state 13

    (13) arithmetic_instruction -> SUB . REG coma REG coma REG

    REG             shift and go to state 29


state 14

    (14) arithmetic_instruction -> AND . REG coma REG coma REG

    REG             shift and go to state 30


state 15

    (15) arithmetic_instruction -> ORR . REG coma REG coma REG

    REG             shift and go to state 31


state 16

    (16) arithmetic_instruction -> LSL . REG coma REG coma REG

    REG             shift and go to state 32


state 17

    (17) comparison_instruction -> CMP . REG coma REG
    (18) comparison_instruction -> CMP . REG coma INTEGER

    REG             shift and go to state 33


state 18

    (19) memory_instruction -> LDR . REG coma PARENTL REG PARENTR

    REG             shift and go to state 34


state 19

    (20) memory_instruction -> STR . REG coma PARENTL REG PARENTR

    REG             shift and go to state 35


state 20

    (23) jump_instruction -> BAL . LABEL

    LABEL           shift and go to state 36


state 21

    (26) label_instruction -> LABEL .

    ADD             reduce using rule 26 (label_instruction -> LABEL .)
    SUB             reduce using rule 26 (label_instruction -> LABEL .)
    AND             reduce using rule 26 (label_instruction -> LABEL .)
    ORR             reduce using rule 26 (label_instruction -> LABEL .)
    LSL             reduce using rule 26 (label_instruction -> LABEL .)
    CMP             reduce using rule 26 (label_instruction -> LABEL .)
    LDR             reduce using rule 26 (label_instruction -> LABEL .)
    STR             reduce using rule 26 (label_instruction -> LABEL .)
    BAL             reduce using rule 26 (label_instruction -> LABEL .)
    BEQ             reduce using rule 26 (label_instruction -> LABEL .)
    BGE             reduce using rule 26 (label_instruction -> LABEL .)
    NOT             reduce using rule 26 (label_instruction -> LABEL .)
    SET             reduce using rule 26 (label_instruction -> LABEL .)
    LABEL           reduce using rule 26 (label_instruction -> LABEL .)
    END             reduce using rule 26 (label_instruction -> LABEL .)
    $end            reduce using rule 26 (label_instruction -> LABEL .)


state 22

    (24) jump_instruction -> BEQ . LABEL

    LABEL           shift and go to state 37


state 23

    (25) jump_instruction -> BGE . LABEL

    LABEL           shift and go to state 38


state 24

    (27) stall_instruction -> NOT .

    ADD             reduce using rule 27 (stall_instruction -> NOT .)
    SUB             reduce using rule 27 (stall_instruction -> NOT .)
    AND             reduce using rule 27 (stall_instruction -> NOT .)
    ORR             reduce using rule 27 (stall_instruction -> NOT .)
    LSL             reduce using rule 27 (stall_instruction -> NOT .)
    CMP             reduce using rule 27 (stall_instruction -> NOT .)
    LDR             reduce using rule 27 (stall_instruction -> NOT .)
    STR             reduce using rule 27 (stall_instruction -> NOT .)
    BAL             reduce using rule 27 (stall_instruction -> NOT .)
    BEQ             reduce using rule 27 (stall_instruction -> NOT .)
    BGE             reduce using rule 27 (stall_instruction -> NOT .)
    NOT             reduce using rule 27 (stall_instruction -> NOT .)
    SET             reduce using rule 27 (stall_instruction -> NOT .)
    LABEL           reduce using rule 27 (stall_instruction -> NOT .)
    END             reduce using rule 27 (stall_instruction -> NOT .)
    $end            reduce using rule 27 (stall_instruction -> NOT .)


state 25

    (21) settear_instruction -> SET . REG coma INTEGER
    (22) settear_instruction -> SET . REG coma REG

    REG             shift and go to state 39


state 26

    (28) end_instruction -> END .

    ADD             reduce using rule 28 (end_instruction -> END .)
    SUB             reduce using rule 28 (end_instruction -> END .)
    AND             reduce using rule 28 (end_instruction -> END .)
    ORR             reduce using rule 28 (end_instruction -> END .)
    LSL             reduce using rule 28 (end_instruction -> END .)
    CMP             reduce using rule 28 (end_instruction -> END .)
    LDR             reduce using rule 28 (end_instruction -> END .)
    STR             reduce using rule 28 (end_instruction -> END .)
    BAL             reduce using rule 28 (end_instruction -> END .)
    BEQ             reduce using rule 28 (end_instruction -> END .)
    BGE             reduce using rule 28 (end_instruction -> END .)
    NOT             reduce using rule 28 (end_instruction -> END .)
    SET             reduce using rule 28 (end_instruction -> END .)
    LABEL           reduce using rule 28 (end_instruction -> END .)
    END             reduce using rule 28 (end_instruction -> END .)
    $end            reduce using rule 28 (end_instruction -> END .)


state 27

    (2) instructions -> instructions instruction .

    ADD             reduce using rule 2 (instructions -> instructions instruction .)
    SUB             reduce using rule 2 (instructions -> instructions instruction .)
    AND             reduce using rule 2 (instructions -> instructions instruction .)
    ORR             reduce using rule 2 (instructions -> instructions instruction .)
    LSL             reduce using rule 2 (instructions -> instructions instruction .)
    CMP             reduce using rule 2 (instructions -> instructions instruction .)
    LDR             reduce using rule 2 (instructions -> instructions instruction .)
    STR             reduce using rule 2 (instructions -> instructions instruction .)
    BAL             reduce using rule 2 (instructions -> instructions instruction .)
    BEQ             reduce using rule 2 (instructions -> instructions instruction .)
    BGE             reduce using rule 2 (instructions -> instructions instruction .)
    NOT             reduce using rule 2 (instructions -> instructions instruction .)
    SET             reduce using rule 2 (instructions -> instructions instruction .)
    LABEL           reduce using rule 2 (instructions -> instructions instruction .)
    END             reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)


state 28

    (12) arithmetic_instruction -> ADD REG . coma REG coma REG

    coma            shift and go to state 40


state 29

    (13) arithmetic_instruction -> SUB REG . coma REG coma REG

    coma            shift and go to state 41


state 30

    (14) arithmetic_instruction -> AND REG . coma REG coma REG

    coma            shift and go to state 42


state 31

    (15) arithmetic_instruction -> ORR REG . coma REG coma REG

    coma            shift and go to state 43


state 32

    (16) arithmetic_instruction -> LSL REG . coma REG coma REG

    coma            shift and go to state 44


state 33

    (17) comparison_instruction -> CMP REG . coma REG
    (18) comparison_instruction -> CMP REG . coma INTEGER

    coma            shift and go to state 45


state 34

    (19) memory_instruction -> LDR REG . coma PARENTL REG PARENTR

    coma            shift and go to state 46


state 35

    (20) memory_instruction -> STR REG . coma PARENTL REG PARENTR

    coma            shift and go to state 47


state 36

    (23) jump_instruction -> BAL LABEL .

    ADD             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    SUB             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    AND             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    ORR             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    LSL             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    CMP             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    LDR             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    STR             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    BAL             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    BEQ             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    BGE             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    NOT             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    SET             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    LABEL           reduce using rule 23 (jump_instruction -> BAL LABEL .)
    END             reduce using rule 23 (jump_instruction -> BAL LABEL .)
    $end            reduce using rule 23 (jump_instruction -> BAL LABEL .)


state 37

    (24) jump_instruction -> BEQ LABEL .

    ADD             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    SUB             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    AND             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    ORR             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    LSL             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    CMP             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    LDR             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    STR             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    BAL             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    BEQ             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    BGE             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    NOT             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    SET             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    LABEL           reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    END             reduce using rule 24 (jump_instruction -> BEQ LABEL .)
    $end            reduce using rule 24 (jump_instruction -> BEQ LABEL .)


state 38

    (25) jump_instruction -> BGE LABEL .

    ADD             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    SUB             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    AND             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    ORR             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    LSL             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    CMP             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    LDR             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    STR             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    BAL             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    BEQ             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    BGE             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    NOT             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    SET             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    LABEL           reduce using rule 25 (jump_instruction -> BGE LABEL .)
    END             reduce using rule 25 (jump_instruction -> BGE LABEL .)
    $end            reduce using rule 25 (jump_instruction -> BGE LABEL .)


state 39

    (21) settear_instruction -> SET REG . coma INTEGER
    (22) settear_instruction -> SET REG . coma REG

    coma            shift and go to state 48


state 40

    (12) arithmetic_instruction -> ADD REG coma . REG coma REG

    REG             shift and go to state 49


state 41

    (13) arithmetic_instruction -> SUB REG coma . REG coma REG

    REG             shift and go to state 50


state 42

    (14) arithmetic_instruction -> AND REG coma . REG coma REG

    REG             shift and go to state 51


state 43

    (15) arithmetic_instruction -> ORR REG coma . REG coma REG

    REG             shift and go to state 52


state 44

    (16) arithmetic_instruction -> LSL REG coma . REG coma REG

    REG             shift and go to state 53


state 45

    (17) comparison_instruction -> CMP REG coma . REG
    (18) comparison_instruction -> CMP REG coma . INTEGER

    REG             shift and go to state 54
    INTEGER         shift and go to state 55


state 46

    (19) memory_instruction -> LDR REG coma . PARENTL REG PARENTR

    PARENTL         shift and go to state 56


state 47

    (20) memory_instruction -> STR REG coma . PARENTL REG PARENTR

    PARENTL         shift and go to state 57


state 48

    (21) settear_instruction -> SET REG coma . INTEGER
    (22) settear_instruction -> SET REG coma . REG

    INTEGER         shift and go to state 59
    REG             shift and go to state 58


state 49

    (12) arithmetic_instruction -> ADD REG coma REG . coma REG

    coma            shift and go to state 60


state 50

    (13) arithmetic_instruction -> SUB REG coma REG . coma REG

    coma            shift and go to state 61


state 51

    (14) arithmetic_instruction -> AND REG coma REG . coma REG

    coma            shift and go to state 62


state 52

    (15) arithmetic_instruction -> ORR REG coma REG . coma REG

    coma            shift and go to state 63


state 53

    (16) arithmetic_instruction -> LSL REG coma REG . coma REG

    coma            shift and go to state 64


state 54

    (17) comparison_instruction -> CMP REG coma REG .

    ADD             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    SUB             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    AND             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    ORR             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    LSL             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    CMP             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    LDR             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    STR             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    BAL             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    BEQ             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    BGE             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    NOT             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    SET             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    LABEL           reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    END             reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)
    $end            reduce using rule 17 (comparison_instruction -> CMP REG coma REG .)


state 55

    (18) comparison_instruction -> CMP REG coma INTEGER .

    ADD             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    SUB             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    AND             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    ORR             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    LSL             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    CMP             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    LDR             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    STR             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    BAL             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    BEQ             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    BGE             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    NOT             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    SET             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    LABEL           reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    END             reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)
    $end            reduce using rule 18 (comparison_instruction -> CMP REG coma INTEGER .)


state 56

    (19) memory_instruction -> LDR REG coma PARENTL . REG PARENTR

    REG             shift and go to state 65


state 57

    (20) memory_instruction -> STR REG coma PARENTL . REG PARENTR

    REG             shift and go to state 66


state 58

    (22) settear_instruction -> SET REG coma REG .

    ADD             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    SUB             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    AND             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    ORR             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    LSL             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    CMP             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    LDR             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    STR             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    BAL             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    BEQ             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    BGE             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    NOT             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    SET             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    LABEL           reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    END             reduce using rule 22 (settear_instruction -> SET REG coma REG .)
    $end            reduce using rule 22 (settear_instruction -> SET REG coma REG .)


state 59

    (21) settear_instruction -> SET REG coma INTEGER .

    ADD             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    SUB             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    AND             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    ORR             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    LSL             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    CMP             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    LDR             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    STR             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    BAL             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    BEQ             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    BGE             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    NOT             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    SET             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    LABEL           reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    END             reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)
    $end            reduce using rule 21 (settear_instruction -> SET REG coma INTEGER .)


state 60

    (12) arithmetic_instruction -> ADD REG coma REG coma . REG

    REG             shift and go to state 67


state 61

    (13) arithmetic_instruction -> SUB REG coma REG coma . REG

    REG             shift and go to state 68


state 62

    (14) arithmetic_instruction -> AND REG coma REG coma . REG

    REG             shift and go to state 69


state 63

    (15) arithmetic_instruction -> ORR REG coma REG coma . REG

    REG             shift and go to state 70


state 64

    (16) arithmetic_instruction -> LSL REG coma REG coma . REG

    REG             shift and go to state 71


state 65

    (19) memory_instruction -> LDR REG coma PARENTL REG . PARENTR

    PARENTR         shift and go to state 72


state 66

    (20) memory_instruction -> STR REG coma PARENTL REG . PARENTR

    PARENTR         shift and go to state 73


state 67

    (12) arithmetic_instruction -> ADD REG coma REG coma REG .

    ADD             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    SUB             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    AND             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    ORR             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    LSL             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    CMP             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    LDR             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    STR             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    BAL             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    BEQ             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    BGE             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    NOT             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    SET             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    LABEL           reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    END             reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)
    $end            reduce using rule 12 (arithmetic_instruction -> ADD REG coma REG coma REG .)


state 68

    (13) arithmetic_instruction -> SUB REG coma REG coma REG .

    ADD             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    SUB             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    AND             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    ORR             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    LSL             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    CMP             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    LDR             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    STR             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    BAL             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    BEQ             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    BGE             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    NOT             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    SET             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    LABEL           reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    END             reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)
    $end            reduce using rule 13 (arithmetic_instruction -> SUB REG coma REG coma REG .)


state 69

    (14) arithmetic_instruction -> AND REG coma REG coma REG .

    ADD             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    SUB             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    AND             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    ORR             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    LSL             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    CMP             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    LDR             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    STR             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    BAL             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    BEQ             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    BGE             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    NOT             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    SET             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    LABEL           reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    END             reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)
    $end            reduce using rule 14 (arithmetic_instruction -> AND REG coma REG coma REG .)


state 70

    (15) arithmetic_instruction -> ORR REG coma REG coma REG .

    ADD             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    SUB             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    AND             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    ORR             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    LSL             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    CMP             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    LDR             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    STR             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    BAL             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    BEQ             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    BGE             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    NOT             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    SET             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    LABEL           reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    END             reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)
    $end            reduce using rule 15 (arithmetic_instruction -> ORR REG coma REG coma REG .)


state 71

    (16) arithmetic_instruction -> LSL REG coma REG coma REG .

    ADD             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    SUB             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    AND             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    ORR             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    LSL             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    CMP             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    LDR             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    STR             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    BAL             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    BEQ             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    BGE             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    NOT             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    SET             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    LABEL           reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    END             reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)
    $end            reduce using rule 16 (arithmetic_instruction -> LSL REG coma REG coma REG .)


state 72

    (19) memory_instruction -> LDR REG coma PARENTL REG PARENTR .

    ADD             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    SUB             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    AND             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    ORR             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    LSL             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    CMP             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    LDR             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    STR             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    BAL             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    BEQ             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    BGE             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    NOT             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    SET             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    LABEL           reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    END             reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)
    $end            reduce using rule 19 (memory_instruction -> LDR REG coma PARENTL REG PARENTR .)


state 73

    (20) memory_instruction -> STR REG coma PARENTL REG PARENTR .

    ADD             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    SUB             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    AND             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    ORR             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    LSL             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    CMP             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    LDR             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    STR             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    BAL             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    BEQ             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    BGE             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    NOT             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    SET             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    LABEL           reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    END             reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)
    $end            reduce using rule 20 (memory_instruction -> STR REG coma PARENTL REG PARENTR .)

