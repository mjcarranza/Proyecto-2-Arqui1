_start:
    set r12, #1                 @ r12: 1 (step)

_stepsHandler:
    set r10, #1                 @ r10: 1

    ldr r4, [r14]               @ r4: 16 bits del contenido del SP
    
    set r0, #0x7F               @ r0: 0x7F
    lsl r0, r0, r10             @ r0: 0xFE
    add r0, r0, r10             @ r0: Mascara (0xFF) para tomar el primer byte de r4
    and r4, r4, r0              @ r4: ASCII de un caracter

    cmp r12, #1                 
    beq _stepI:
    cmp r12, #2
    beq _stepII:
    cmp r12, #3
    beq _stepIII:
    cmp r12, #4
    beq _stepIV:
    cmp r12, #5
    beq _stepV:
    cmp r12, #6
    beq _stepVI:
    cmp r12, #7
    beq _restartSteps:

_stepI:
    cmp r4, #0
    beq _exit:

    add r12, r12, r10

    set r0, #2                  
    set r1, #2                  
    set r2, #2                  
    set r3, #10

    cmp r4, #0x41              @ A
    beq _bresenham:
    cmp r4, #0x42              @ B
    beq _bresenham:
    cmp r4, #0x43              @ C
    beq _bresenham:
    cmp r4, #0x44              @ D
    beq _bresenham:
    cmp r4, #0x45              @ E
    beq _bresenham:
    cmp r4, #0x46              @ F
    beq _bresenham:                 
    cmp r4, #0x47              @ G
    beq _bresenham:
    cmp r4, #0x48              @ H
    beq _bresenham:
    cmp r4, #0x4b              @ K
    beq _bresenham:
    cmp r4, #0x4c              @ L
    beq _bresenham:
    cmp r4, #0x4d              @ M
    beq _bresenham:
    cmp r4, #0x4e              @ N
    beq _bresenham:
    cmp r4, #0x4f              @ O
    beq _bresenham:
    cmp r4, #0x50              @ P
    beq _bresenham:
    cmp r4, #0x51              @ Q
    beq _bresenham:
    cmp r4, #0x52              @ R
    beq _bresenham:
    cmp r4, #0x55              @ U
    beq _bresenham:
    cmp r4, #0x57              @ W
    beq _bresenham:
    
    set r0, #2                  
    set r1, #2 
    set r2, #6                  
    set r3, #2

    cmp r4, #0x4a              @ J
    beq _bresenham:  

    set r0, #2                  
    set r1, #6                  
    set r2, #2                  
    set r3, #10  

    cmp r4, #0x53              @ S
    beq _bresenham:

    set r0, #2
    set r1, #10                  
    set r2, #6                  
    set r3, #2
    
    cmp r4, #0x56              @ V
    beq _bresenham:

    set r0, #2
    set r1, #10                  
    set r2, #6             
    set r3, #6
 
    cmp r4, #0x59              @ Y
    beq _bresenham:

    set r0, #2
    set r1, #1                  
    set r2, #3                  
    set r3, #2

    cmp r4, #0x2c              @ ,
    beq _bresenham:

    set r0, #2
    set r1, #2                  
    set r2, #2 
    set r3, #2

    cmp r4, #0x2e              @ .
    beq _bresenham:

_stepII:
    add r12, r12, r10

    set r0, #2                  
    set r1, #10                  
    set r2, #10                  
    set r3, #10

    cmp r4, #0x41              @ A
    beq _bresenham:
    cmp r4, #0x43              @ C
    beq _bresenham:
    cmp r4, #0x45              @ E
    beq _bresenham:
    cmp r4, #0x46              @ F
    beq _bresenham:
    cmp r4, #0x47              @ G
    beq _bresenham:
    cmp r4, #0x49              @ I
    beq _bresenham:
    cmp r4, #0x4a              @ J
    beq _bresenham:
    cmp r4, #0x4d              @ M
    beq _bresenham:
    cmp r4, #0x4f              @ O
    beq _bresenham:
    cmp r4, #0x50              @ P
    beq _bresenham:
    cmp r4, #0x51              @ Q
    beq _bresenham:
    cmp r4, #0x52              @ R
    beq _bresenham:
    cmp r4, #0x53              @ S
    beq _bresenham:
    cmp r4, #0x54              @ T
    beq _bresenham:
    cmp r4, #0x5a              @ Z
    beq _bresenham:

    set r0, #2                  
    set r1, #10 
    set r2, #9                  
    set r3, #10

    cmp r4, #0x42              @ B
    beq _bresenham:

    set r0, #2                  
    set r1, #10                  
    set r2, #10                  
    set r3, #9

    cmp r4, #0x44              @ D
    beq _bresenham:

    set r0, #2                  
    set r1, #6                  
    set r2, #10                  
    set r3, #2
    
    cmp r4, #0x4b              @ K
    beq _bresenham:

    set r0, #2                  
    set r1, #10                  
    set r2, #10                  
    set r3, #2    
    
    cmp r4, #0x4e              @ N
    beq _bresenham:
    cmp r4, #0x58              @ X
    beq _bresenham:

    set r0, #6                  
    set r1, #2                  
    set r2, #10                  
    set r3, #10
 
    cmp r4, #0x56              @ V
    beq _bresenham:

    set r0, #6                  
    set r1, #6                  
    set r2, #10                  
    set r3, #10

    cmp r4, #0x59              @ Y
    beq _bresenham:

_stepIII:
    add r12, r12, r10

    set r0, #2                  
    set r1, #2                  
    set r2, #10                  
    set r3, #2

    cmp r4, #0x42              @ B
    beq _bresenham:
    cmp r4, #0x43              @ C
    beq _bresenham:
    cmp r4, #0x45              @ E
    beq _bresenham:
    cmp r4, #0x47              @ G
    beq _bresenham:
    cmp r4, #0x49              @ I
    beq _bresenham:
    cmp r4, #0x4c              @ L
    beq _bresenham:
    cmp r4, #0x4f              @ O
    beq _bresenham:
    cmp r4, #0x51              @ Q
    beq _bresenham:
    cmp r4, #0x53              @ S
    beq _bresenham:
    cmp r4, #0x55              @ U
    beq _bresenham:
    cmp r4, #0x57              @ W
    beq _bresenham:
    cmp r4, #0x5a              @ Z
    beq _bresenham:

    set r0, #2                  
    set r1, #2                  
    set r2, #10                  
    set r3, #3

    cmp r4, #0x44              @ D
    beq _bresenham:

    set r0, #2                  
    set r1, #6                  
    set r2, #10                  
    set r3, #10

    cmp r4, #0x4b              @ K
    beq _bresenham:

    set r0, #10                  
    set r1, #6                  
    set r2, #10                  
    set r3, #10

    cmp r4, #0x50              @ P
    beq _bresenham:
    cmp r4, #0x52              @ R
    beq _bresenham:

    set r0, #6                  
    set r1, #2                  
    set r2, #6                  
    set r3, #6

    cmp r4, #0x59              @ Y
    beq _bresenham:

_stepIV:
    add r12, r12, r10

    set r0, #2                  
    set r1, #6                  
    set r2, #10                  
    set r3, #6

    cmp r4, #0x41              @ A
    beq _bresenham:
    cmp r4, #0x42              @ B
    beq _bresenham:
    cmp r4, #0x45              @ E
    beq _bresenham:
    cmp r4, #0x46              @ F
    beq _bresenham:
    cmp r4, #0x48              @ H
    beq _bresenham:
    cmp r4, #0x50              @ P
    beq _bresenham:
    cmp r4, #0x52              @ R
    beq _bresenham:
    cmp r4, #0x53              @ S
    beq _bresenham:

    set r0, #10                  
    set r1, #3                  
    set r2, #10                  
    set r3, #9

    cmp r4, #0x44              @ D
    beq _bresenham:

    set r0, #6                  
    set r1, #6                 
    set r2, #10                  
    set r3, #6

    cmp r4, #0x47              @ G
    beq _bresenham:

    set r0, #6                  
    set r1, #2                  
    set r2, #6                  
    set r3, #10

    cmp r4, #0x49              @ I
    beq _bresenham:
    cmp r4, #0x4a              @ J
    beq _bresenham:
    cmp r4, #0x4d              @ M
    beq _bresenham:
    cmp r4, #0x54              @ T
    beq _bresenham:
    cmp r4, #0x57              @ W
    beq _bresenham:

    set r0, #8                  
    set r1, #3                  
    set r2, #9                  
    set r3, #1

    cmp r4, #0x51              @ Q
    beq _bresenham:

    set r0, #2                 
    set r1, #2                  
    set r2, #10                  
    set r3, #10

    cmp r4, #0x58              @ X
    beq _bresenham:
    cmp r4, #0x5a              @ Z
    beq _bresenham:
    
_stepV:
    add r12, r12, r10

    set r0, #10                 
    set r1, #2                  
    set r2, #10                  
    set r3, #10

    cmp r4, #0x41              @ A
    beq _bresenham:
    cmp r4, #0x48              @ H
    beq _bresenham:
    cmp r4, #0x4d              @ M
    beq _bresenham:
    cmp r4, #0x4e              @ N
    beq _bresenham:
    cmp r4, #0x4f              @ O
    beq _bresenham:
    cmp r4, #0x51              @ Q
    beq _bresenham:
    cmp r4, #0x55              @ U
    beq _bresenham:
    cmp r4, #0x57              @ W
    beq _bresenham:

    set r0, #10                 
    set r1, #2                  
    set r2, #10                  
    set r3, #6

    cmp r4, #0x42              @ B
    beq _bresenham:
    cmp r4, #0x47              @ G
    beq _bresenham:
    cmp r4, #0x53              @ S
    beq _bresenham:

    set r0, #8                 
    set r1, #6                  
    set r2, #10                  
    set r3, #2

    cmp r4, #0x52              @ R
    beq _bresenham:

_stepVI:
    add r12, r12, r10

    set r0, #9                 
    set r1, #6                  
    set r2, #9                  
    set r3, #10

    cmp r4, #0x42              @ B
    beq _bresenham:

_restartSteps:
    add r14, r14, r10           @ r14: Corriemiento de 1 byte en el SP

    set r10, #100
    add r13, r13, r10           @ r13: Corriemiento de 100 bytes en el PU

    set r12, #1
    bal _stepsHandler:

_bresenham:
    sub r2, r2, r0              @ r2: dx = x2 - x1
    sub r3, r3, r1              @ r3: dy = y2 - y1
    set r4, #1                  @ r4: 1, y++ (aumento en la direcion de y)

    cmp r3, #0                  
    bge _bresenham2:             @ Salta si dy es positivo

    @ Angulo negativo 
    lsl r4, r3, r10             @ r4: 2*dy
    sub r3, r3, r4              @ r3: dy = dy - 2dy = -dy 

    set r4, #0                  @ r4: 0
    sub r4, r4, r10             @ r4: -1, y-- (decremento en la direcion de y)

_bresenham2:
    sub r5, r2, r3              @ r5: dx - dy
    cmp r5, #0
    set r5, #0                  @ r5: 0 (NO inversion de x,y)
    bge _bresenham3:             @ Salta si r5 es positivo

    @ Angulo mayor a 45°
    set r5, #1                  @ r5: 1 (inversion de x,y)

@ r0: x
@ r1: y
@ r2: dx
@ r3: dy
@ r4: y++/y--
@ r5: invercion de x,y
@ r6: p
@ r7: Contador
_bresenham3:
    cmp r5, #0
    beq _bresenham3A:
    bal _bresenham3B:

_bresenham3A:
    lsl r6, r3, r10             @ r6: 2*dy
    sub r6, r6, r2              @ r6: p = 2*dy - dx
    add r7, r2, r10             @ r7: dx + 1 (contador)
    bal _bresenhamWhile:

_bresenham3B:
    lsl r6, r2, r10             @ r6: 2*dx
    sub r6, r6, r3              @ r6: p = 2*dx - dy
    add r7, r3, r10             @ r7: dy + 1 (contador)
    bal _bresenhamWhile:

_bresenhamWhile:
    sub r7, r7, r10              @ r7: r7--
    bal _addPixel:

_bresenhamWhile2:
    cmp r7, #0
    beq _stepsHandler:

    cmp r5, #0
    beq _bresenhamWhile2A:
    bal _bresenhamWhile2B:

_bresenhamWhile2A:
    add r0, r0, r10             @ x++
    lsl r8, r3, r10             @ r8: 2*dy
    lsl r9, r2, r10             @ r9: 2*dx
    bal _bresenhamWhile3:

_bresenhamWhile2B:
    add r1, r1, r4              @ y++/y--
    lsl r8, r2, r10             @ r8: 2*dx
    lsl r9, r3, r10             @ r9: 2*dy
    bal _bresenhamWhile3:

_bresenhamWhile3:
    cmp r6, #0
    add r6, r6, r8              @ r6: p = p + r8
    bge _bresenhamElse:
    bal _bresenhamWhile:
    
_bresenhamElse:
    sub r6, r6, r9
    cmp r5, #0
    beq _bresenhamElseA:
    bal _bresenhamElseB:

_bresenhamElseA:
    add r1, r1, r4
    bal _bresenhamWhile:

_bresenhamElseB:
    add r0, r0, r10
    bal _bresenhamWhile:

_addPixel:
    set r8, #10                 @ r8: 10
    sub r8, r8, r1              @ r8: 10 - y (contador)
    sub r9, r0, r10             @ r9: x - 1

_addPixel2:
    cmp r8, #0
    beq _addPixel3: 
    set r10, #10
    add r9, r9, r10             @ r9: r9 + 10
    set r10, #1
    sub r8, r8, r10             @ r8: r8 - 1
    bal _addPixel2:  

_addPixel3:
    add r8, r13, r9             @ r8: [PU + r9]
    ldr r9, [r8]                @ r9: 2 bytes de la direccion de r8
    orr r9, r9, r10             @ r9: 2 bytes de la direccion de r8, pero con el LSB en 1       
    str r9, [r8]                @ Se almacena en [PU + r9] un 1 para representar un pixel negro
    bal _bresenhamWhile2:
    
_exit:
    @ Ultima instruccion

    set r10, #0
